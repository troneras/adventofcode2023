package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"unicode"
)

type card struct {
	num      int
	winning  []int
	existing []int
	hits     map[int]int
	value    int
}

func (c card) String() string {
	return fmt.Sprintf("Card number: %d\n  Winning numbers: %v\n  Existing numbers: %v\n  Hits: %v\n  Value: %v\n\n", c.num, c.winning, c.existing, c.hits, c.value)
}

func main() {
	file, err := os.Open("input.txt")

	if err != nil {
		panic(err)
	}

	defer file.Close()

	filescanner := bufio.NewScanner(file)

	filescanner.Split(bufio.ScanLines)

	cards := []card{}

	for filescanner.Scan() {
		line := filescanner.Text()
		fmt.Println(line)

		// find the card number
		current := 0
		card_num := 0
		for i := 0; i < len(line); i++ {
			if line[i] == ':' {
				current = i + 1
				break
			}
			if unicode.IsDigit(rune(line[i])) {
				card_num = card_num*10 + int(line[i]-'0')
			}
		}
		//fmt.Println("Card number: ", card_num)

		// find the winning numbers, numbers are separated by spaces
		winning := []int{}
		for i := current; i < len(line); i++ {
			if line[i] == '|' {
				current = i + 1
				break
			}
			if unicode.IsDigit(rune(line[i])) {
				partial := string(line[i])
				i++
				for unicode.IsDigit(rune(line[i])) {
					partial += string(line[i])
					i++
				}
				number, err := strconv.Atoi(partial)
				if err != nil {
					panic(err)
				}
				winning = append(winning, number)
			}
		}

		//fmt.Println("Winning numbers: ", winning)

		// find the existing numbers, numbers are separated by spaces
		existing := []int{}
		for i := current; i < len(line); i++ {
			if unicode.IsDigit(rune(line[i])) {
				partial := string(line[i])
				i++
				for i < len(line) && unicode.IsDigit(rune(line[i])) {
					partial += string(line[i])
					i++
				}
				number, err := strconv.Atoi(partial)
				if err != nil {
					panic(err)
				}
				existing = append(existing, number)
			}
			current = i
		}

		//fmt.Println("Existing numbers: ", existing)
		cards = append(cards, card{num: card_num, winning: winning, existing: existing})
	}

	// calculate the number of hits for each card
	for i := 0; i < len(cards); i++ {
		for j := 0; j < len(cards[i].winning); j++ {
			for k := 0; k < len(cards[i].existing); k++ {
				if cards[i].winning[j] == cards[i].existing[k] {
					if cards[i].hits == nil {
						cards[i].hits = make(map[int]int)
					}
					cards[i].hits[cards[i].winning[j]]++
				}
			}
		}
		if len(cards[i].hits) == 0 {
			continue
		}
		cards[i].value = 1 << (len(cards[i].hits) - 1)
	}

	for _, c := range cards {
		fmt.Println(c.String())
	}

	// the value of the card is 2^(the number of hits - 1)
	total := 0
	for i := 0; i < len(cards); i++ {
		total += cards[i].value
		//fmt.Println("Card number: ", cards[i].num, "Value: ", 1<<(cards[i].num_hits-1))
	}

	fmt.Println("Total: ", total)

}
